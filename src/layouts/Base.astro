---
import type { SiteMeta } from "@/types";
import BaseHead from "@/components/BaseHead.astro";
import SkipLink from "@/components/SkipLink.astro";
import ThemeProvider from "@/components/ThemeProvider.astro";
import Footer from "@/components/layout/Footer.astro";
import Header from "@/components/layout/Header.astro";
import { siteConfig } from "@/site-config";
import DynamicTheme from '@/components/DynamicTheme.astro';
// import { ViewTransitions } from 'astro:transitions';
// <ViewTransitions />





interface Props {
  meta?: {
    title?: string;
    description?: string;
    articleDate?: string;
    ogImage?: string;
  };
  title?: string;
  description?: string;
  articleDate?: string;
  ogImage?: string;
}
import { getEntry } from 'astro:content';
const siteSettings = await getEntry('siteSettings', 'main');
const { showFooter, enableImageBlur } = siteSettings.data;

const { meta, title, description, articleDate, ogImage} = Astro.props;

const pageTitle = title || meta?.title;
const pageDescription = description || meta?.description;
const pageArticleDate = articleDate || meta?.articleDate;
const pageOgImage = ogImage || meta?.ogImage;
---
<html lang={siteConfig.lang} data-theme="light">
	<head>
		<script>
			function getInitialTheme() {
				const savedTheme = localStorage.getItem('theme');
				return savedTheme || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
			}
			document.documentElement.dataset.theme = getInitialTheme();
		</script>
		
		<ThemeProvider />
		<BaseHead 
			title={pageTitle} 
			description={pageDescription} 
			articleDate={pageArticleDate} 
			ogImage={pageOgImage} 
		/>
		<DynamicTheme />
	</head>
	
	<body>
		<SkipLink />
		
		<Header transition:persist />
		
				<main id="main">
					<div id="top"></div>
					<slot />
				</main>
				{ showFooter && (
					<Footer />
					)}
								</body>
								<script>
									function initializeScrollListener() {
										const horizontalScrollClassName = 'horizontal-slider';
										const scrollMultiplier = .5;

										function applyScrollBehavior(element: HTMLElement) {
											const handleWheel = (event: WheelEvent) => {
												if (element.scrollWidth > element.clientWidth) {
													event.preventDefault();
													const scrollAmount = (event.deltaX || event.deltaY) * scrollMultiplier;
													element.scrollLeft += scrollAmount;
												}
											};

											element.addEventListener('wheel', handleWheel, { passive: false });

											let touchStartX: number | null = null;
											element.addEventListener('touchstart', (event: TouchEvent) => {
												touchStartX = event.touches[0].clientX;
											}, { passive: true });

											element.addEventListener('touchmove', (event: TouchEvent) => {
												if (touchStartX === null) return;
												const touchEndX = event.touches[0].clientX;
												const diff = touchStartX - touchEndX;
												element.scrollLeft += diff;
												touchStartX = touchEndX;
											}, { passive: true });
										}

										function checkAndApplyScroll() {
											document.querySelectorAll(`.${horizontalScrollClassName}`).forEach((el) => {
												if (el instanceof HTMLElement) {
													applyScrollBehavior(el);
												}
											});
										}

										// Initial application
										checkAndApplyScroll();

										// Set up a MutationObserver to watch for changes in the DOM
										const observer = new MutationObserver(checkAndApplyScroll);
										observer.observe(document.body, { childList: true, subtree: true });

										// Also check when the custom event is fired
										window.addEventListener('viewModeChanged', checkAndApplyScroll);
									}

									document.addEventListener('DOMContentLoaded', initializeScrollListener);
									document.addEventListener('astro:page-load', initializeScrollListener);
								</script>
	<script is:inline define:vars={{ enableImageBlur }}>
		function initializeImageLoader() {
			const blurEnabled = typeof enableImageBlur !== 'undefined' ? enableImageBlur : true;
			console.log('Image loader initialized, blur enabled:', blurEnabled);

			if (!blurEnabled) return;

			const images = document.querySelectorAll('img');
			images.forEach(img => {
				// Apply initial blur
				img.style.filter = 'blur(20px)';
				img.style.transition = 'filter 0.5s ease-in-out';

				if (img.complete) {
					img.style.filter = 'blur(0px)';
				} else {
					img.addEventListener('load', function() {
						this.style.filter = 'blur(0px)';
					});
				}
			});
		}

		function initializeScrollListener() {
			const horizontalScrollClassName = 'horizontal-slider';
			const scrollMultiplier = .5;

			

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						const target = entry.target;
						
						const handleWheel = (event) => {
							if (target.scrollWidth > target.clientWidth) {
								event.preventDefault();
								const scrollAmount = (event.deltaX || event.deltaY) * scrollMultiplier;
								target.scrollLeft += scrollAmount;
							}
						};

						target.addEventListener('wheel', handleWheel, { passive: false });

						let touchStartX;
						target.addEventListener('touchstart', (event) => {
							touchStartX = event.touches[0].clientX;
						}, { passive: true });

						target.addEventListener('touchmove', (event) => {
							if (!touchStartX) return;
							const touchEndX = event.touches[0].clientX;
							const diff = touchStartX - touchEndX;
							target.scrollLeft += diff;
							touchStartX = touchEndX;
						}, { passive: true });
					}
				});
			}, { threshold: 0.5 });

			document.querySelectorAll(`.${horizontalScrollClassName}`).forEach(el => {
				observer.observe(el);
			});
		}

		document.addEventListener('DOMContentLoaded', () => {
			initializeImageLoader();
			initializeScrollListener();
		});
		document.addEventListener('astro:page-load', () => {
			initializeImageLoader();
			initializeScrollListener();
		});
		window.addEventListener('viewModeChanged', initializeScrollListener);
	</script>
</html>		
