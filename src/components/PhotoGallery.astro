---
import { Image } from 'astro:assets';
import { createReader } from '@keystatic/core/reader';
import keystaticConfig from '../../keystatic.config';
import GalleryLightbox from './GalleryLightbox.jsx';
import { getEntry } from 'astro:content';

import Switch from "@/components/Switch.jsx";


// Default values
const DEFAULT_SETTINGS = {
  defaultView: 'grid',
  showHeader: true
};

const DEFAULT_LANGUAGE = {
  allimages: 'All Images'
};

let siteSettingsData = DEFAULT_SETTINGS;
let languageData = DEFAULT_LANGUAGE;

try {
  const settings = await getEntry('siteSettings', 'main');
  if (settings?.data) {
    siteSettingsData = { ...DEFAULT_SETTINGS, ...settings.data };
  }
} catch (error) {
  console.warn('Site settings not found, using defaults');
}

try {
  const language = await getEntry('language', 'index');
  if (language?.data) {
    languageData = { ...DEFAULT_LANGUAGE, ...language.data };
  }
} catch (error) {
  console.warn('Language settings not found, using defaults');
}

const { defaultView } = siteSettingsData;

const reader = createReader(process.cwd(), keystaticConfig);
const photoSettings = await reader.singletons.photoSettings.read();
const defaultDirectory = photoSettings?.defaultDirectory || 'all';
const galleryMode = photoSettings?.galleryMode || 'directory';


const imageFiles = import.meta.glob('/public/images/photos/**/*.{jpg,jpeg,png,gif,webp,avif}', { eager: true });
let allImages;
if (galleryMode === 'keystatic') {
  allImages = photoSettings?.galleryImages?.map((item) => ({
    src: item.image,
    alt: item.caption || '',
    title: item.caption || '',
    directory: 'default',
    isDefault: true
  })) || [];
} else {
  allImages = Object.entries(imageFiles).map(([path, file]) => ({
    src: path.replace('/public', ''),
    alt: path.split('/').pop()?.split('.')[0] || '',
    title: path.split('/').pop()?.split('.')[0] || '',
    directory: path.split('/').slice(-2, -1)[0],
    isDefault: path.split('/').slice(-2, -1)[0] === defaultDirectory
  }));
}

const directories = [
  'all',
  defaultDirectory,
  ...new Set(
    allImages
      .map(img => img.directory)
      .filter(dir => dir !== defaultDirectory)
  )
].filter(Boolean).sort((a, b) => {
  if (a === 'all') return -1;
  if (b === 'all') return 1;
  if (a === defaultDirectory) return -1;
  if (b === defaultDirectory) return 1;
  return a.localeCompare(b);
});

const showCaptions = photoSettings?.showCaptions ?? true;
const showGallerySelector = photoSettings?.showGallerySelector && galleryMode === 'directory';
const showSwitch = photoSettings?.showSwitch;

const images = allImages.map(img => ({
  src: img.src,
  caption: img.title, 
}));

// Pre-process images for the client component
const processedImages = allImages.map(image => ({
  src: image.src,
  alt: image.alt || '',
  title: image.title || '',
  // Only include data needed by GalleryLightbox
}));
---




  <div class="cattags" style={{ width: '', display: 'flex', justifyContent:'center', gap: '0', color: '' }}>
    
    {showGallerySelector && (
    <select aria-label="View Available Galleries" id="directorySelect" name="directorySelect" style={{ background: '', border: '1px solid #000', borderRadius: 'var(--border-radius)', padding: '8px', boxShadow: '0px 0px 0px 1px #000', opacity:'.9', color:'#fff' }}>
      {directories.map((dir) => (
        <option value={dir} selected={dir === defaultDirectory}>
          {dir === 'all' ? languageData.allimages : dir}
        </option>
      ))}
    </select>
    )}
    
    {showSwitch && (
    <div class="switcher" style={{marginTop:'10px'}}><Switch client:load defaultView={defaultView} /></div>
    )}
  </div>





<div class={`homegallery contentpanel ${defaultView === 'swipe' ? 'slider panels horizontal-slider' : 'grid-container'}`} style="padding-top:20px;">
  <div class="sliderSpacer" style={{ height: "", paddingTop: "", display: "" }} />


  
  {allImages.map((image) => (
    <div class="post-card1" data-directory={image.directory}>
      <Image 
        src={image.src ?? ''} 
        alt={image.alt ?? ''}
        width={800}
        height={600}
        class="object-contain rounded-image"
        // style="border-radius: 20px;"
      />
      {showCaptions && (
        <div class="image-caption">
          <h2>{image.title}</h2>
        </div>
      )}
    </div>
  ))}
</div>

<!-- Pass only processed data to client component -->
<GalleryLightbox 
  client:only="react" 
  images={processedImages} 
  showCaptions={showCaptions} 
/>





<style>


.post-card1 {
  /* display: flex;
  flex-direction: column;
  align-items: center; */
  border-radius: var(--border-radius);
}
img{border-radius: var(--border-radius) !important;}

.image-caption {
  margin-top: 8px;
  text-align: center;
  filter:brightness(.75);
}

.post-card1.hidden {
  display: none;
}

.post-card1.visible {
  display: block;
}

@media(max-width:48rem) {
  #directorySelect {right:inherit; left:1rem; width:60%;}
  body:has(.header) #directorySelect{left:0 !important; right:0 !important; }
}
</style>
<script define:vars={{ defaultDirectory }}>
  function filterImages(selectedDir) {
    const galleryContainer = document.querySelector('.contentpanel');
    if (!galleryContainer) return;
    
    const images = galleryContainer.querySelectorAll('.post-card1');
    
    images.forEach((image) => {
      if (image instanceof HTMLElement) {
        const imageDir = image.dataset.directory;
        if (selectedDir === 'all' || imageDir === selectedDir) {
          image.style.display = 'block';
        } else {
          image.style.display = 'none';
        }
      }
    });
  }

  function initializeGallery() {
    // Use defaultDirectory instead of reading from select
    filterImages(defaultDirectory);
  }

  // Wait for both DOM and images to load
  window.addEventListener('load', initializeGallery);

  const directorySelect = document.getElementById('directorySelect');
  directorySelect?.addEventListener('change', (event) => {
    if (event.target instanceof HTMLSelectElement) {
      filterImages(event.target.value);
      scrollToTop();
    }
  });

  function scrollToTop() {
    const target = document.querySelector('.contentpanel');
    if (target?.classList.contains('horizontal-slider')) {
      target.scrollTo({ left: 0, behavior: 'smooth' });
    } else {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    setTimeout(() => {
      window.scrollTo(0, 0);
      document.body.scrollTop = 0;
      document.documentElement.scrollTop = 0;
    }, 100);
  }
  
</script>
