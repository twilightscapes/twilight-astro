---
import type { StyleSettings } from '@/types';
import { getEntry } from 'astro:content';

// Add type annotation for styleSettings
const defaultStyleSettings: StyleSettings = {
  lightBg: '#ffffff',
  lightLink: '#000000',
  lightText: '#000000',
  lightAccent: '#000000',
  lightAccent2: '#000000',
  lightHeader: '#000000',
  darkBg: '#000000',
  darkLink: '#ffffff',
  darkText: '#ffffff',
  darkAccent: '#ffffff',
  darkAccent2: '#ffffff',
  darkHeader: '#ffffff',
  borderRadius: '0px'
};

let customCSS = '';
let resumeName = '';
let themeMode: 'light' | 'dark' | 'user' = 'user';
let styleSettings: StyleSettings = defaultStyleSettings;

try {
  const styleapps = await getEntry('styleapps', 'index');
  const resumeSettings = await getEntry('resumeSettings', 'index');
  const siteSettings = await getEntry('siteSettings', 'main');

  if (styleapps?.data) {
    customCSS = styleapps.data.customCSS || '';
    styleSettings = {
      ...defaultStyleSettings,
      ...styleapps.data
    };
  }

  if (resumeSettings?.data) {
    resumeName = resumeSettings.data.name || '';
  }

  if (siteSettings?.data) {
    themeMode = siteSettings.data.themeMode || 'user';
  }
} catch (error) {
  console.error('Error loading theme settings:', error);
}
---

<script is:inline define:vars={{ styleSettings, themeMode }}>
  function getInitialTheme() {
    if (themeMode === 'light' || themeMode === 'dark') {
      return themeMode;
    }
    const savedTheme = localStorage.getItem('theme');
    return savedTheme || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  }

  function applyTheme() {
    const root = document.documentElement;
    const body = document.body;
    const theme = root.dataset.theme;
  
    root.style.setProperty('--theme-bg-light', styleSettings.lightBg);
    root.style.setProperty('--theme-link-light', styleSettings.lightLink);
    root.style.setProperty('--theme-text-light', styleSettings.lightText);
    root.style.setProperty('--theme-accent-light', styleSettings.lightAccent);
    root.style.setProperty('--theme-accent2-light', styleSettings.lightAccent2);
    root.style.setProperty('--theme-header-light', styleSettings.lightHeader);

    root.style.setProperty('--theme-bg-dark', styleSettings.darkBg);
    root.style.setProperty('--theme-link-dark', styleSettings.darkLink);
    root.style.setProperty('--theme-text-dark', styleSettings.darkText);
    root.style.setProperty('--theme-accent-dark', styleSettings.darkAccent);
    root.style.setProperty('--theme-accent2-dark', styleSettings.darkAccent2);
    root.style.setProperty('--theme-header-dark', styleSettings.darkHeader);

    root.style.setProperty('--border-radius', styleSettings.borderRadius);

    // Add this check before setting the body background color
    if (body) {
      body.style.backgroundColor = getComputedStyle(root).getPropertyValue(`--theme-bg-${theme}`);
    }

    updateCurrentTheme(root.dataset.theme);
  }

  function updateCurrentTheme(theme) {
    const root = document.documentElement;
    root.dataset.theme = theme;
    localStorage.setItem('theme', theme);
  }

  document.documentElement.dataset.theme = getInitialTheme();
  applyTheme();
  document.addEventListener('astro:page-load', applyTheme);

  window.toggleTheme = function() {
    const currentTheme = document.documentElement.dataset.theme;
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    updateCurrentTheme(newTheme);
    applyTheme();
  }
</script>
<style set:html={customCSS}></style>
<style define:vars={{ resumeName }}>
  @media print{
    main:before {
        content: var(--resumeName) !important;
        display: block;
      margin-bottom: 10px;
      border: 1px solid #bbb;
      padding: 3px 5px;
      font-style: italic;
      text-align: center;
    position:absolute;
    top: 100px;
    z-index: 1000;
    }
  }
</style>